{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"7. Paralelismo","provenance":[],"authorship_tag":"ABX9TyOn7l8nLncTlwztO+LYw8Rd"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"LMWBeZwEfTZY"},"source":["# PARALELISMO EN SUMA"]},{"cell_type":"markdown","metadata":{"id":"7-qXw_uqhRh8"},"source":["1.   t_designación = n\n","2.   t_ejecucción = m\n","3.   número_de_threads = i\n","4.   t_union = q\n","\n","Tiempo total en paralelo = n + m + q \n","\n","Tiempo total en secuencia = t\n","\n","Tiempo total en secuencia >>>> Tiempo total en paralelo\n","\n","Tiempo total en secuencia/Tiempo total en paralelo = speed-up"]},{"cell_type":"code","metadata":{"id":"EvGCVralgeiv"},"source":["from multiprocessing import Pool\n","\n","def sum_nums(args):\n","    low = int(args[0])\n","    high = int(args[1])\n","    return sum(range(low,high+1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zZuozYJCfjRO","executionInfo":{"status":"ok","timestamp":1627768546545,"user_tz":300,"elapsed":126439,"user":{"displayName":"Antoni mauricio","photoUrl":"","userId":"11948024098455226900"}},"outputId":"656441e4-2efd-49ca-a1b8-771eaa4278be"},"source":["# Forma clásica - de sumar\n","% time\n","n = 1000000000\n","contador = 0\n","for i in range(1, n+1):\n","  contador += i"],"execution_count":18,"outputs":[{"output_type":"stream","text":["CPU times: user 4 µs, sys: 0 ns, total: 4 µs\n","Wall time: 8.58 µs\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7ON05QmtfBLS","executionInfo":{"status":"ok","timestamp":1627768699957,"user_tz":300,"elapsed":24163,"user":{"displayName":"Antoni mauricio","photoUrl":"","userId":"11948024098455226900"}},"outputId":"77b4d91a-065c-450f-b39a-139992b7ce7e"},"source":["# forma paralela - de sumar\n","% time\n","if __name__ == \"__main__\":\n","    n = 1000000000 \n","    procs = 10 \n","    sizeSegment = n/procs\n","    jobs = []\n","    for i in range(0, procs):\n","        jobs.append((i*sizeSegment+1, (i+1)*sizeSegment))\n","\n","    pool = Pool(procs).map(sum_nums, jobs)\n","    result = sum(pool)"],"execution_count":20,"outputs":[{"output_type":"stream","text":["CPU times: user 0 ns, sys: 5 µs, total: 5 µs\n","Wall time: 10 µs\n"],"name":"stdout"}]}]}